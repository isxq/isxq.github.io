<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[砌墙集]]></title>
  <link href="https://blog.podog.cn/atom.xml" rel="self"/>
  <link href="https://blog.podog.cn/"/>
  <updated>2020-10-13T10:24:22+08:00</updated>
  <id>https://blog.podog.cn/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[Objective-C Runtime（1）- 万物源于对象]]></title>
    <link href="https://blog.podog.cn/16024819338644.html"/>
    <updated>2020-10-12T13:52:13+08:00</updated>
    <id>https://blog.podog.cn/16024819338644.html</id>
    <content type="html"><![CDATA[
<p><code>NSObject *obj = [NSObject init];</code><br/>
<span id="more"></span><!-- more --></p>

<p>Objective-C 是 C 的超集，它通过 Runtime 赋予了 C 语言面向对象的能力，但是这是怎么完成的？</p>

<p>从 Objective-C 的角度来讲，一般如果我们要创建一个对象，就需要先拥有一个该对象对应的类。我们用关键字 <code>Class</code> 来表示。C++ 本身的类是用 <code>class</code> 来进行表示，我们可以以这个关键字作为突破口来进行深层次的探究。</p>

<p>打开开源代码工程，<code>command + o</code> 搜索 <code>Class</code> 找到相关定义，我们可以看到如下代码：</p>

<pre><code class="language-text">typedef struct objc_class *Class;
</code></pre>

<p>可以看到 <code>Class</code> 其实是一个 <code>objc_class</code> 类型的结构体指针。继续搜索 <code>objc_class</code>，可以看到：</p>

<pre><code class="language-text">struct objc_class : objc_object {
    // Class ISA;
    Class superclass;
    cache_t cache;             // formerly cache pointer and vtable
    class_data_bits_t bits;
    
    /* ... */   
}
</code></pre>

<p>这里我们先忽略具体实现，最直观的信息就是 <code>objc_class</code> 继承于 <code>objc_object</code>。<br/>
继续往底层探索，<code>objc_object</code> 的实现如下：</p>

<pre><code class="language-text">struct objc_object {
private:
    isa_t isa;

public:
    /* ... */
}
</code></pre>

<p>忽略掉相关的方法，<code>objc_object</code> 的内容主要是一个 <code>isa_t</code> 类型的结构体。下面我们就对 <code>isa_t</code> 进行解析。</p>

<h2 id="toc_0">isa_t</h2>

<p><code>isa_t</code> 的定义如下：</p>

<pre><code class="language-text">union isa_t {
    isa_t() { }
    isa_t(uintptr_t value) : bits(value) { }

    Class cls;
    uintptr_t bits;
#if defined(ISA_BITFIELD)
    struct {
        ISA_BITFIELD;  // defined in isa.h
    };
#endif
};
</code></pre>

<p>这里首先要引入两个概念：联合体和位域。</p>

<h3 id="toc_1">联合体和位域</h3>

<h4 id="toc_2">位域</h4>

<p><strong>位域</strong>定义与结构定义相仿，其形式为：</p>

<pre><code class="language-text">struct 位域结构名 {
    位域列表
}；
</code></pre>

<p>其中位域列表的形式为 </p>

<pre><code class="language-text">类型说明符 位域名: 位域长度(占多少位)
</code></pre>

<p>例如</p>

<pre><code class="language-text">struct {
    int a: 4;
    int b: 2;
    int c: 8;
} data;
</code></pre>

<p>说明该结构体中，共占两个字节。其中位域 a 占 4 位，位域 b 占 2 位，位域 c 占 8 位。</p>

<p>这里可能会存在疑问，因为如果严格来算的话，该结构体的实际内容应该为 14 位。之所以占 2 字节是因为位域遵循着一套压缩规则，即：</p>

<ul>
<li>如果相邻位域字段的类型相同，且其位宽之和小于这个类型的sizeof大小，则后面的字段将紧邻前一个字段存储，直到不能容纳为止；</li>
<li>如果相邻位域字段的类型相同，但其位宽之和大于类型的sizeof大小，则后面的字段将从新的存储单元开始，其偏移量为其类型大小的整数倍；</li>
<li>如果相邻的位域字段的类型不同，则各编译器的具体实现有差异（VC6采取不压缩方式，Dev-C++采取压缩方式）；</li>
<li>如果位域字段之间穿插着非位域字段，则不进行压缩；</li>
<li>整个结构体的总大小为最宽基本类型成员大小的整数倍。</li>
</ul>

<h4 id="toc_3">联合体</h4>

<p><strong>联合体(union）</strong>与结构体(struct)有一些相似之处。但两者有本质上的不同。<br/>
在结构体中,各成员有各自的内存空间, 一个结构变量的总长度是各成员长度之和。<br/>
而在联合体中,各成员共享一段内存空间, 一个联合变量的长度等于各成员中最长的长度。</p>

<ul>
<li>联合体是一个结构；</li>
<li>它的所有成员相对于基地址的偏移量都为0；</li>
<li>此结构空间要大到足够容纳最&quot;宽&quot;的成员；</li>
<li>其对齐方式要适合其中所有的成员；</li>
</ul>

<h3 id="toc_4">isa_t 的解析</h3>

<p>回到上边 <code>isa_t</code> 的代码实现，我们不难发现它其实就是一个 <code>Class</code> 类型与 <code>bits</code> 的联合体。大小应该是 8 字节。那么该结构的位域列表是什么呢？</p>

<p>这里根据 <code>ISA_BITFIELD</code> 的定义，画出了一张比较直观的图：</p>

<p><img src="media/16024819338644/isa_t.png" alt="isa_t"/></p>

<p>可以看到，不同的架构体系下位域的表示是不一样的，这里只给出了 __arm64__ 和 __x86_64__ 的架构。</p>

<p>在上图中需要我们着重注意的点就是 <code>shiftcls</code> 这个区域保存的就是 cls 的内容，它指向当前对象的类信息。</p>

<p>而其他的标记代表着当前对象的其他标识信息。综上所述，那么就可以得到下图。</p>

<p><img src="media/16024819338644/objc-class.png" alt="objc-class"/></p>

<p>而 class 的 isa 指针将指向自己的元类（meta class），super Class 指针指向自己的父类，如此以来，我们就可以看到那张耳熟能详的关系图：</p>

<p><img src="media/16024819338644/16025582737931.jpg" alt=""/></p>

<p>这也是 Runtime 中意义比较重要的一张图，之后很多的关键点都将围绕它展开。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C Runtime（0）- 絮絮叨叨和可运行开源代码的配置]]></title>
    <link href="https://blog.podog.cn/16020508270796.html"/>
    <updated>2020-10-07T14:07:07+08:00</updated>
    <id>https://blog.podog.cn/16020508270796.html</id>
    <content type="html"><![CDATA[
<p><code>NSLog(@&quot;Hello World&quot;);</code><br/>
<span id="more"></span><!-- more --></p>

<p>从2016年键下这第一行代码开始，眨眼间四年已经过去了。iOS 的行情从热到冷，人们的热情也从狂热到平静。当喧嚣的泡沫都蒸发，沉淀下来的就是暗潮汹涌的理性。但相对的，技术浪潮越来越汹涌，公司的技术门槛越高，可能当我们每天耽于重复而机械的业务流程时，就被技术本身遗忘在了起点上。</p>

<p>所以无论是出于什么角度考虑，我们都有理由选择去充实自己，让漂浮不定的概念扎根在土壤里。既然我们被遗忘在了起点，就背起行囊重新出发。重新入门一次 iOS 开发。</p>

<p>这个系列，我们将从源码的角度出发，一步步剖析 Objective-C Runtime。</p>

<h2 id="toc_0">可运行开源代码的配置</h2>

<blockquote>
<p>macOS version: 10.15.7<br/>
Xcode version: 12.0.1<br/>
objc code version: 787.1</p>
</blockquote>

<p>去<a href="https://opensource.apple.com/">苹果开源网站</a>上下载最新的 objc 代码版本（选择最新的 macOS 版本，点击进入之后，search “objc” 即可）。然后开始对源码进行配置，以能够运行。</p>

<p>配置完成的<a href="https://github.com/isxq/objc4/tree/objc4_787.1">项目代码</a>.</p>

<h3 id="toc_1">源码配置</h3>

<ul>
<li><p><strong>Error type 1:</strong> <br/>
    <font color=red>unable to find sdk &#39;macosx.internal&#39;</font><br/>
<strong>解决办法：</strong><br/>
<img src="media/16020508270796/16020561626140.jpg" alt="" style="width:881px;"/></p></li>
<li><p><strong>Error type 2:</strong><br/>
    <font color=red>file not find</font><br/>
<strong>解决办法：</strong></p>
<ol>
<li>在项目根目录创建文件夹 <code>RequiredFiles</code></li>
<li>设置文件检索路径：选择 <code>objc -&gt; Build Settings</code>，在工程的 <code>Header Search Paths</code> 中添加搜索路径 <code>$(SRCROOT)/RequiredFiles</code></li>
<li><p>添加缺失文件</p>
<table>
<thead>
<tr>
<th>缺失文件</th>
<th>文件获取路径</th>
<th>文件存放路径</th>
</tr>
</thead>
<tbody>
<tr>
<td>sys/reason.h</td>
<td><a href="https://opensource.apple.com/source/xnu/xnu-6153.141.1/bsd/sys/reason.h">xnu-6153.11.26/bsd/sys/reason.h</a></td>
<td>RequiredFiles/sys/reason.h</td>
</tr>
<tr>
<td>mach-o/dyld_priv.h</td>
<td><a href="https://opensource.apple.com/source/dyld/dyld-750.6/include/mach-o/dyld_priv.h">dyld-750.6/include/mach-o/dyld_priv.h</a></td>
<td>RequiredFiles/mach-o/dyld_priv.h</td>
</tr>
<tr>
<td>os/lock_private.h</td>
<td><a href="https://opensource.apple.com/source/libplatform/libplatform-220.100.1/private/os/lock_private.h">libplatform-220.100.1/private/os/lock_private.h</a></td>
<td>RequiredFiles/os/lock_private.h</td>
</tr>
<tr>
<td>os/base_private.h</td>
<td><a href="https://opensource.apple.com/source/libplatform/libplatform-220.100.1/private/os/base_private.h">libplatform-220.100.1/private/os/base_private.h</a></td>
<td>RequiredFiles/os/base_private.h</td>
</tr>
<tr>
<td>pthread/tsd_private.h</td>
<td><a href="https://opensource.apple.com/source/libpthread/libpthread-416.100.3/private/tsd_private.h">libpthread-416.100.3/private/tsd_private.h</a></td>
<td>RequiredFiles/pthread/tsd_private.h</td>
</tr>
<tr>
<td>pthread/spinlock_private.h</td>
<td><a href="https://opensource.apple.com/source/libpthread/libpthread-416.100.3/private/spinlock_private.h">libpthread-416.100.3/private/spinlock_private.h</a></td>
<td>RequiredFiles/pthread/spinlock_private.h</td>
</tr>
<tr>
<td>System/machine/spinlock_private.h</td>
<td><a href="https://opensource.apple.com/source/xnu/xnu-6153.141.1/osfmk/machine/cpu_capabilities.h">xnu-6153.141.1/osfmk/machine/cpu_capabilities.h</a></td>
<td>RequiredFiles/System/machine/spinlock_private.h</td>
</tr>
<tr>
<td>os/tsd.h</td>
<td><a href="https://opensource.apple.com/source/xnu/xnu-6153.141.1/libsyscall/os/tsd.h">xnu-6153.141.1/libsyscall/os/tsd.h</a></td>
<td>RequiredFiles/os/tsd.h</td>
</tr>
<tr>
<td>System/pthread_machdep.h</td>
<td><a href="https://opensource.apple.com/source/Libc/Libc-583/pthreads/pthread_machdep.h">Libc-583/pthreads/pthread_machdep.h</a></td>
<td>RequiredFiles/System/pthread_machdep.h</td>
</tr>
<tr>
<td>CrashReporterClient.h</td>
<td><a href="https://opensource.apple.com/source/Libc/Libc-825.24/include/CrashReporterClient.h">Libc-825.24/include/CrashReporterClient.h</a></td>
<td>RequiredFiles/CrashReporterClient.h</td>
</tr>
<tr>
<td>objc-shared-cache.h</td>
<td><a href="https://opensource.apple.com/source/dyld/dyld-750.6/include/objc-shared-cache.h">dyld-750.6/include/objc-shared-cache.h</a></td>
<td>RequiredFiles/objc-shared-cache.h</td>
</tr>
<tr>
<td>_simple.h</td>
<td><a href="https://opensource.apple.com/source/libplatform/libplatform-220.100.1/private/_simple.h">libplatform-220.100.1/private/_simple.h</a></td>
<td>RequiredFiles/_simple.h</td>
</tr>
<tr>
<td>kern/restartable.h</td>
<td><a href="https://opensource.apple.com/source/xnu/xnu-6153.141.1/osfmk/kern/restartable.h">xnu-6153.141.1/osfmk/kern/restartable.h</a></td>
<td>RequiredFiles/kern/restartable.h</td>
</tr>
<tr>
<td>Block_private.h</td>
<td><a href="https://opensource.apple.com/source/libclosure/libclosure-74/Block_private.h">libclosure-74/Block_private.h</a></td>
<td>RequiredFiles/Block_private.h</td>
</tr>
</tbody>
</table></li>
</ol></li>
<li><p><strong>Error type 3:</strong><br/>
    <font color=red>error in dyld_priv.h</font><br/>
<strong>解决办法：</strong><br/>
    删除所有 <code>bridgeos(3.0)</code></p></li>
<li><p><strong>Error type 4:</strong><br/>
    <font color=red>error in lock_private.h</font><br/>
<strong>解决办法：</strong><br/>
    删除所有 <code>bridgeos(4.0)</code></p></li>
<li><p><strong>Error type 5:</strong><br/>
    <font color=red>error in pthread_machdep.h</font><br/>
<strong>解决办法：</strong><br/>
    删除或注销 <code>pthread_lock_t</code>、<code>_pthread_has_direct_tsd</code>和<code>_pthread_getspecific_direct</code>的定义，目前已经有新的实现方式。</p></li>
<li><p><strong>Error type 6:</strong><br/>
    <font color=red>&#39;CrashReporterClient.h&#39; file not found</font><br/>
<strong>解决办法：</strong><br/>
    导入下载的还是报错，可以通过以下方式解决<br/>
    1. 在文件中添加宏定义 <code>#define LIBC_NO_LIBCRASHREPORTERCLIENT</code><br/>
    2. 如果还是报错CrashReporterClient 的问题，在BuildSetting -&gt; Other Linker Flags 中去掉 <code>CrashReporterClient</code>.</p></li>
<li><p><strong>Error type 7:</strong><br/>
    <font color=red>Use of undeclared identifier &#39;DYLD_MACOSX_VERSION_10_*&#39;</font><br/>
<strong>解决办法：</strong><br/>
在 dyld_priv.h 中添加如下代码：</p>
<pre><code class="language-text">#define DYLD_MACOSX_VERSION_10_11 0x000A0B00
#define DYLD_MACOSX_VERSION_10_12 0x000A0C00<br/>
#define DYLD_MACOSX_VERSION_10_13 0x000A0D00<br/>
#define DYLD_MACOSX_VERSION_10_14 0x000A0E00
</code></pre></li>
<li><p><strong>Error type 8:</strong><br/>
    <font color=red>Can&#39;t open order file: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/AppleInternal/OrderFiles/libobjc.order</font><br/>
<strong>解决办法：</strong></p>
<ol>
<li>选择 <code>target -&gt; objc -&gt; Build Settings -&gt; Order File</code></li>
<li>添加搜索路径 <code>$(SRCROOT)/libobjc.order</code></li>
</ol></li>
<li><p><strong>Error type 9:</strong><br/>
    <font color=red>/xcodebuild:1:1: SDK &quot;macosx.internal&quot; cannot be located.</font><br/>
<strong>解决办法：</strong></p>
<ol>
<li>选择 <code>target -&gt; objc -&gt; Build Phases -&gt; Run Script (markgc)</code></li>
<li>将 <code>macosx.internal</code> 改为 <code>macosx</code></li>
</ol></li>
</ul>

<h3 id="toc_2">运行</h3>

<p>创建新的 target：objcExplore。<br/>
设置二进制依赖。<br/>
运行。<br/>
如果断点不生效：<br/>
Build Settings -&gt;  Link-Time Optimization 为 NO。<br/>
Build Settings -&gt;  Enable Hardened Runtime 为NO。<br/>
至此我们就迈出了万里长征的第一步。Runtime 的面纱等你揭开。</p>

]]></content>
  </entry>
  
</feed>
