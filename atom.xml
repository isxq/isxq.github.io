<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[砌墙集]]></title>
  <link href="https://blog.podog.cn/atom.xml" rel="self"/>
  <link href="https://blog.podog.cn/"/>
  <updated>2020-08-26T23:19:22+08:00</updated>
  <id>https://blog.podog.cn/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[Objective-C 底层探究]]></title>
    <link href="https://blog.podog.cn/15982490668149.html"/>
    <updated>2020-08-24T14:04:26+08:00</updated>
    <id>https://blog.podog.cn/15982490668149.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->

<ul>
<li>
<a href="#toc_0">类与对象</a>
<ul>
<li>
<a href="#toc_1">对象的初始化</a>
<ul>
<li>
<a href="#toc_2">alloc 函数解析</a>
</li>
<li>
<a href="#toc_3">callAlloc 函数解析</a>
</li>
</ul>
</li>
<li>
<a href="#toc_4">isa</a>
</li>
<li>
<a href="#toc_5">类的结构解读</a>
</li>
</ul>
</li>
<li>
<a href="#toc_6">方法</a>
<ul>
<li>
<a href="#toc_7">方法的缓存</a>
</li>
<li>
<a href="#toc_8">方法的查找</a>
</li>
<li>
<a href="#toc_9">方法的解析与转发原理</a>
</li>
</ul>
</li>
</ul>


<p>这篇文章基于 <code>objc4-779.1</code> 进行调试，代码可以从<a href="https://opensource.apple.com/tarballs">苹果官方开源代码列表</a>找到，也可以直接使用我编译通过的版本 <a href="https://github.com/isxq/objc4">objc4</a>。</p>

<h2 id="toc_0">类与对象</h2>

<h3 id="toc_1">对象的初始化</h3>

<p>一般来讲，我们新建一个对象的操作通常是：</p>

<pre><code class="language-objectivec">    NSObject *obj = [[NSObject alloc] init];
</code></pre>

<p>这个过程发生了什么？对象的本质又是什么呢？我们来一步步进行拆解。这句初始化语句涉及到了两个函数：<code>+ alloc()</code> 和 <code>- init()</code>。这两个函数都分别进行了什么操作呢？</p>

<h4 id="toc_2">alloc 函数解析</h4>

<p>首先我们来针对 <code>+ alloc</code> 函数进行调试。先把对 <code>- init（）</code> 的调用删掉，只留下 <code>+ alloc()</code> 的部分，进行断点。</p>

<p><img src="media/15982490668149/15984369654224.jpg" alt="" style="width:1004px;"/></p>

<blockquote>
<p>常用的代码跟踪方式：<br/>
 - Xcode 菜单栏依次点击 Debug -&gt; Debug Workflow -&gt; Always show Disassembly<br/>
 - control + step into<br/>
 - 符号断点，如 <code>+ alloc()</code></p>
</blockquote>

<p>这里采用 control + step into 的方式。<br/>
<img src="media/15982490668149/15984373429961.jpg" alt="" style="width:770px;"/><br/>
可以看到，下一个调用的函数为 <code>objc_alloc</code>。</p>

<p>源码如下：</p>

<pre><code class="language-objectivec">id
objc_alloc(Class cls)
{
    return callAlloc(cls, true/*checkNil*/, false/*allocWithZone*/);
}
</code></pre>

<h4 id="toc_3">callAlloc 函数解析</h4>

<p><code>callAlloc</code> 源码如下：</p>

<pre><code class="language-cpp">// Call [cls alloc] or [cls allocWithZone:nil], with appropriate 
// shortcutting optimizations.
static ALWAYS_INLINE id
callAlloc(Class cls, bool checkNil, bool allocWithZone=false)
{
#if __OBJC2__
    if (slowpath(checkNil &amp;&amp; !cls)) return nil;
    if (fastpath(!cls-&gt;ISA()-&gt;hasCustomAWZ())) {
        return _objc_rootAllocWithZone(cls, nil);
    }
#endif

    // No shortcuts available.
    if (allocWithZone) {
        return ((id(*)(id, SEL, struct _NSZone *))objc_msgSend)(cls, @selector(allocWithZone:), nil);
    }
    return ((id(*)(id, SEL))objc_msgSend)(cls, @selector(alloc));
}

</code></pre>

<h3 id="toc_4">isa</h3>

<h3 id="toc_5">类的结构解读</h3>

<h2 id="toc_6">方法</h2>

<h3 id="toc_7">方法的缓存</h3>

<h3 id="toc_8">方法的查找</h3>

<h3 id="toc_9">方法的解析与转发原理</h3>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[响应式编程]]></title>
    <link href="https://blog.podog.cn/15940163349808.html"/>
    <updated>2020-07-06T14:18:54+08:00</updated>
    <id>https://blog.podog.cn/15940163349808.html</id>
    <content type="html"><![CDATA[
<p>以时间为索引的事件序列。</p>

<p>Observables。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cordova iOS 插件开发]]></title>
    <link href="https://blog.podog.cn/15937634632169.html"/>
    <updated>2020-07-03T16:04:23+08:00</updated>
    <id>https://blog.podog.cn/15937634632169.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 启动流程分析]]></title>
    <link href="https://blog.podog.cn/15937633545967.html"/>
    <updated>2020-07-03T16:02:34+08:00</updated>
    <id>https://blog.podog.cn/15937633545967.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
</feed>
